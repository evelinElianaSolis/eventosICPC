{"ast":null,"code":"// Componente de validaciones\nconst errorCaracteresNoPermitidos = 'Esta intentando ingresar un caracter no permitido';\nconst errorOchoCaracteres = 'Este campo no puede superar los 8 caracteres';\nconst errorTreintaCaracteres = 'Este campo no puede superar los 30 caracteres';\nconst errorCincuentaCaracteres = 'Este campo no puede superar los 50 caracteres';\nconst errorSieteCaracteres = 'Este campo no puede ser menor los 7 caracteres';\nconst errorSoloNumeros = 'Solo se permiten caracteres numéricos';\nconst errorSeleccioneUnaOpcion = 'Seleccione al menos una opción';\nconst errorCorreo = 'Ingrese un correo válido en el formato example@dominio.com';\nconst errorCorreoCar = 'Los caracteres espeviales que intenta ingresar son invalidos';\nconst Validaciones = {\n  validarCampoVacio: (valor, nombreCampo) => {\n    if (!valor.trim()) {\n      return `El campo ${nombreCampo} no puede estar vacío.`;\n    } else {\n      return \"\";\n    }\n  },\n  validarNombre: nombre => {\n    const newValueAlpha = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\n    if (nombre.length > 30) {\n      return errorTreintaCaracteres;\n    } else if (newValueAlpha !== nombre) {\n      return errorCaracteresNoPermitidos;\n    } else {\n      return '';\n    }\n  },\n  devolverNombre: data => {\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\n    return newValueAlpha;\n  },\n  validarApellido: apellido => {\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\n    if (!apellidoRegex.test(apellido)) {\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarCI: CI => {\n    const ciRegex = /^\\d{7,8}$/;\n    if (!ciRegex.test(CI)) {\n      return \"Por favor, ingrese un número de cédula válido (entre 7 y 8 dígitos).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarCorreo: correo => {\n    const correoCar = /^[\\d.@\\-_]{7,8}$/;\n    const correoRegex = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\n    if (correo.length > 50) {\n      return errorCincuentaCaracteres;\n    } else if (!correoRegex.test(correo)) {\n      return errorCorreo;\n    } else if (!correoCar.test(correo)) {\n      return errorCorreoCar;\n    } else {\n      return \"\";\n    }\n  },\n  devolverCorreo: data => {\n    const correoLimpio = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\n    return correoLimpio;\n  },\n  validarGenero: genero => {\n    if (genero !== \"F\" && genero !== \"M\") {\n      return \"Por favor, seleccione un género válido.\";\n    } else {\n      return \"\";\n    }\n  },\n  validarTelefono: telefono => {\n    const telefonoRegex = /^\\d{1,8}$/;\n    if (!telefonoRegex.test(telefono)) {\n      return \"Por favor, ingrese un número de teléfono válido (máximo 8 dígitos).\";\n    } else {\n      return \"\";\n    }\n  }\n};\nexport default Validaciones;","map":{"version":3,"names":["errorCaracteresNoPermitidos","errorOchoCaracteres","errorTreintaCaracteres","errorCincuentaCaracteres","errorSieteCaracteres","errorSoloNumeros","errorSeleccioneUnaOpcion","errorCorreo","errorCorreoCar","Validaciones","validarCampoVacio","valor","nombreCampo","trim","validarNombre","nombre","newValueAlpha","replace","substring","length","devolverNombre","data","validarApellido","apellido","apellidoRegex","test","validarCI","CI","ciRegex","validarCorreo","correo","correoCar","correoRegex","devolverCorreo","correoLimpio","validarGenero","genero","validarTelefono","telefono","telefonoRegex"],"sources":["C:/Users/Evita/Desktop/TIS0.2/AdministradorDeEventos/frontend/src/components/utils/Validaciones.jsx"],"sourcesContent":["// Componente de validaciones\r\nconst errorCaracteresNoPermitidos='Esta intentando ingresar un caracter no permitido';\r\nconst errorOchoCaracteres='Este campo no puede superar los 8 caracteres';\r\nconst errorTreintaCaracteres='Este campo no puede superar los 30 caracteres';\r\nconst errorCincuentaCaracteres='Este campo no puede superar los 50 caracteres';\r\nconst errorSieteCaracteres='Este campo no puede ser menor los 7 caracteres';\r\nconst errorSoloNumeros='Solo se permiten caracteres numéricos';\r\nconst errorSeleccioneUnaOpcion='Seleccione al menos una opción';\r\nconst errorCorreo='Ingrese un correo válido en el formato example@dominio.com';\r\nconst errorCorreoCar='Los caracteres espeviales que intenta ingresar son invalidos';\r\nconst Validaciones = {\r\n  validarCampoVacio: (valor, nombreCampo) => {\r\n    if (!valor.trim()) {\r\n      return `El campo ${nombreCampo} no puede estar vacío.`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n   validarNombre: (nombre) => {\r\n      const newValueAlpha = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\r\n          \r\n      if (nombre.length > 30) {\r\n      return errorTreintaCaracteres;\r\n      } else if (newValueAlpha !== nombre) {\r\n        return errorCaracteresNoPermitidos;       \r\n      } else {\r\n        return '';\r\n      }\r\n    },\r\n\r\n  \r\n\r\n  devolverNombre:(data)=>{\r\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\r\n    return newValueAlpha;\r\n  },\r\n\r\n\r\n  validarApellido: (apellido) => {\r\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\r\n\r\n    if (!apellidoRegex.test(apellido)) {\r\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n    validarCI: (CI) => {\r\n      const ciRegex = /^\\d{7,8}$/;\r\n      if (!ciRegex.test(CI)) {\r\n        return \"Por favor, ingrese un número de cédula válido (entre 7 y 8 dígitos).\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    },\r\n  validarCorreo: (correo) => {\r\n    const correoCar = /^[\\d.@\\-_]{7,8}$/;\r\n    const correoRegex = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\r\n        if (correo.length > 50) {\r\n          return errorCincuentaCaracteres;\r\n        } else if (!correoRegex.test(correo)) {\r\n          return errorCorreo;\r\n        } else if (!correoCar.test(correo)) {\r\n          return errorCorreoCar;\r\n        } else {\r\n           return \"\";\r\n        }\r\n  },\r\n\r\n  devolverCorreo:(data)=>{\r\n    const correoLimpio = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\r\n    return correoLimpio;\r\n  },\r\n  validarGenero: (genero) => {\r\n    if (genero !== \"F\" && genero !== \"M\") {\r\n      return \"Por favor, seleccione un género válido.\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  validarTelefono: (telefono) => {\r\n    const telefonoRegex = /^\\d{1,8}$/;\r\n    if (!telefonoRegex.test(telefono)) {\r\n      return \"Por favor, ingrese un número de teléfono válido (máximo 8 dígitos).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n};\r\nexport default Validaciones;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}