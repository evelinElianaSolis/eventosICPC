{"ast":null,"code":"// Componente de validaciones\nconst errorCaracteresNoPermitidos = 'Esta intentando ingresar un caracter no permitido';\nconst errorOchoCaracteres = 'Lo lamento no puede ingresar mas caracteres';\n//const errorTreintaCaracteres='Este campo solo admite estos 30 caracteres';\nconst errorTreintaCaracteres = 'Lo lamento no puede ingresar mas caracteres';\n\n//const errorSesentaCaracteres='Este campo no puede superar los 60 caracteres';\nconst errorSesentaCaracteres = 'Lo lamento no puede ingresar mas caracteres';\nconst errorSieteCaracteres = 'Este campo no puede ser menor a los 7 caracteres';\nconst errorSoloNumeros = 'Solo se permiten caracteres numéricos';\nconst errorSeleccioneUnaOpcion = 'Seleccione al menos una opción';\nconst errorCorreo = 'Ingrese un correo válido en el formato example@dominio.com';\nconst errorCorreoCar = 'Los caracteres espeviales que intenta ingresar son invalidos';\nconst errorMinOchoCaracteres = 'Este campo no puede ser menor a los 8 caracteres';\nconst campoNovacio = `Este campo no puede estar vacío.`;\nconst Validaciones = {\n  validarCampoVacio: valor => {\n    if (!valor) {\n      return campoNovacio;\n    } else {\n      return \"\";\n    }\n  },\n  validarCampoVacioSeleccionEquipo: valor => {\n    if (!valor.trim() || valor === \"Selecciona un equipo\") {\n      return `Este campo no puede estar vacío.`;\n    } else {\n      return \"\";\n    }\n  },\n  validarNombre: nombre => {\n    const newValueAlpha = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\n    if (nombre.length > 30) {\n      return errorTreintaCaracteres;\n    } else if (newValueAlpha !== nombre) {\n      return errorCaracteresNoPermitidos;\n    } else {\n      return '';\n    }\n  },\n  validarEquipo: nombre => {\n    const caracteresNoPermitidos = /[()\\/\\\\,;{}\\[\\]^?]/;\n    if (nombre.length > 60) {\n      return errorTreintaCaracteres;\n    } else if (caracteresNoPermitidos.test(nombre)) {\n      return errorCaracteresNoPermitidos;\n    } else {\n      return '';\n    }\n  },\n  devolverNombre: data => {\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\n    return newValueAlpha;\n  },\n  devolverNombreEquipo: data => {\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 60);\n    return newValueAlpha;\n  },\n  validarApellido: apellido => {\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\n    console.log();\n    if (!apellidoRegex.test(apellido)) {\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarCI: CI => {\n    if (!CI || typeof CI !== 'string') {\n      return campoNovacio;\n    }\n    const newValueID = CI.replace(/[^\\d]/g, '').substring(0, 8);\n    if (CI.length > 8) {\n      return errorOchoCaracteres;\n    } else if (newValueID !== CI) {\n      return errorSoloNumeros;\n    } else if (CI.length < 7) {\n      return errorSieteCaracteres;\n    } else {\n      return \"\";\n    }\n  },\n  devolverCI: ciDev => {\n    if (!ciDev) {\n      return;\n    }\n    const newValueID = ciDev.replace(/[^\\d]/g, '').substring(0, 8);\n    return newValueID;\n  },\n  validarCorreo: correo => {\n    const correoRegex = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\n    if (correo.length > 60) {\n      return errorSesentaCaracteres;\n    } else if (!correoRegex.test(correo)) {\n      return errorCorreo;\n    } else {\n      return \"\";\n    }\n  },\n  devolverCorreo: correo => {\n    const cor = correo.replace(/[^a-zA-Z0-9_.@-]/g, '').substring(0, 60);\n    return cor;\n  },\n  validarGenero: genero => {\n    if (genero !== \"F\" && genero !== \"M\") {\n      return \"Por favor, seleccione un género válido.\";\n    } else {\n      return \"\";\n    }\n  },\n  validarTelefono: telefono => {\n    const telefonoRegex = telefono.replace(/[^\\d]/g, '').substring(0, 8);\n    if (telefono.length > 8) {\n      return errorOchoCaracteres;\n    } else if (telefonoRegex !== telefono) {\n      return errorSoloNumeros;\n    } else if (telefono.length < 8) {\n      return errorMinOchoCaracteres;\n    } else {\n      return \"\";\n    }\n  },\n  devolverTelefono: telefono => {\n    const telefonoR = telefono.replace(/[^\\d]/g, '').substring(0, 8);\n    return telefonoR;\n  }\n};\nexport default Validaciones;","map":{"version":3,"names":["errorCaracteresNoPermitidos","errorOchoCaracteres","errorTreintaCaracteres","errorSesentaCaracteres","errorSieteCaracteres","errorSoloNumeros","errorSeleccioneUnaOpcion","errorCorreo","errorCorreoCar","errorMinOchoCaracteres","campoNovacio","Validaciones","validarCampoVacio","valor","validarCampoVacioSeleccionEquipo","trim","validarNombre","nombre","newValueAlpha","replace","substring","length","validarEquipo","caracteresNoPermitidos","test","devolverNombre","data","devolverNombreEquipo","validarApellido","apellido","apellidoRegex","console","log","validarCI","CI","newValueID","devolverCI","ciDev","validarCorreo","correo","correoRegex","devolverCorreo","cor","validarGenero","genero","validarTelefono","telefono","telefonoRegex","devolverTelefono","telefonoR"],"sources":["C:/Users/Evita/Desktop/PruebaTis/eventosICPC/frontend/src/components/utils/Validaciones.jsx"],"sourcesContent":["// Componente de validaciones\r\nconst errorCaracteresNoPermitidos='Esta intentando ingresar un caracter no permitido';\r\nconst errorOchoCaracteres='Lo lamento no puede ingresar mas caracteres';\r\n//const errorTreintaCaracteres='Este campo solo admite estos 30 caracteres';\r\nconst errorTreintaCaracteres='Lo lamento no puede ingresar mas caracteres';\r\n\r\n//const errorSesentaCaracteres='Este campo no puede superar los 60 caracteres';\r\nconst errorSesentaCaracteres='Lo lamento no puede ingresar mas caracteres';\r\n\r\nconst errorSieteCaracteres='Este campo no puede ser menor a los 7 caracteres';\r\nconst errorSoloNumeros='Solo se permiten caracteres numéricos';\r\nconst errorSeleccioneUnaOpcion='Seleccione al menos una opción';\r\nconst errorCorreo='Ingrese un correo válido en el formato example@dominio.com';\r\nconst errorCorreoCar='Los caracteres espeviales que intenta ingresar son invalidos';\r\nconst errorMinOchoCaracteres = 'Este campo no puede ser menor a los 8 caracteres';\r\nconst campoNovacio=`Este campo no puede estar vacío.`;\r\nconst Validaciones = {\r\n  validarCampoVacio: (valor) => {\r\n    if (!valor) {\r\n      return campoNovacio;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  validarCampoVacioSeleccionEquipo: (valor) => {\r\n    if (!valor.trim() || valor===\"Selecciona un equipo\") {\r\n      return `Este campo no puede estar vacío.`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n \r\n   validarNombre: (nombre) => {\r\n      const newValueAlpha = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\r\n          \r\n      if (nombre.length > 30) {\r\n      return errorTreintaCaracteres;\r\n      } else if (newValueAlpha !== nombre) {\r\n        return errorCaracteresNoPermitidos;       \r\n      } else {\r\n        return '';\r\n      }\r\n    },\r\n    \r\n    validarEquipo : (nombre) => {\r\n      const caracteresNoPermitidos = /[()\\/\\\\,;{}\\[\\]^?]/;\r\n    \r\n      if (nombre.length > 60) {\r\n        return errorTreintaCaracteres;\r\n      } else if (caracteresNoPermitidos.test(nombre)) {\r\n        return errorCaracteresNoPermitidos;\r\n      } else {\r\n        return '';\r\n      }\r\n    },\r\n\r\n  devolverNombre:(data)=>{\r\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 30);\r\n    return newValueAlpha;\r\n  },\r\n  devolverNombreEquipo:(data)=>{\r\n    const newValueAlpha = data.replace(/[^a-zA-Z\\s]/g, '').substring(0, 60);\r\n    return newValueAlpha;\r\n  },\r\n\r\n  validarApellido: (apellido) => {\r\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\r\nconsole.log()\r\n    if (!apellidoRegex.test(apellido)) {\r\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n    validarCI: (CI) => {\r\n      if (!CI || typeof CI !== 'string') {\r\n        return campoNovacio;\r\n    }      \r\n      const newValueID = CI.replace(/[^\\d]/g, '').substring(0, 8);\r\n\r\n      if (CI.length > 8) {\r\n        return errorOchoCaracteres;\r\n      } else if (newValueID !== CI) {\r\n        return errorSoloNumeros;        \r\n      } else if (CI.length < 7) {\r\n         return errorSieteCaracteres;\r\n      } else {\r\n        return \"\";}\r\n    },\r\n\r\n    devolverCI:(ciDev)=>{\r\n      if (!ciDev) {\r\n        return ;\r\n              }   \r\n      const newValueID = ciDev.replace(/[^\\d]/g, '').substring(0, 8);\r\n      return newValueID;\r\n    },\r\n\r\n    \r\n\r\n  validarCorreo: (correo) => {\r\n\r\n    const correoRegex = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\r\n\r\n           if (correo.length > 60) {\r\n          return errorSesentaCaracteres;\r\n        } else if (!correoRegex.test(correo)) {\r\n          return errorCorreo;\r\n        } else{\r\n           return \"\";\r\n        }\r\n  },\r\n\r\n  devolverCorreo:(correo)=>{\r\n    const cor=correo.replace(/[^a-zA-Z0-9_.@-]/g, '').substring(0, 60);\r\n    return cor;\r\n  },\r\n  validarGenero: (genero) => {\r\n    if (genero !== \"F\" && genero !== \"M\") {\r\n      return \"Por favor, seleccione un género válido.\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  validarTelefono: (telefono) => {\r\n    const telefonoRegex = telefono.replace(/[^\\d]/g, '').substring(0, 8);\r\n    if (telefono.length > 8) {\r\n      return errorOchoCaracteres;\r\n    } else if (telefonoRegex !== telefono) {\r\n      return errorSoloNumeros;        \r\n    } else if (telefono.length < 8) {\r\n       return errorMinOchoCaracteres;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  devolverTelefono: (telefono) => {\r\n    const telefonoR = telefono.replace(/[^\\d]/g, '').substring(0, 8);\r\n    \r\n      return telefonoR;\r\n  },\r\n\r\n\r\n};\r\nexport default Validaciones;"],"mappings":"AAAA;AACA,MAAMA,2BAA2B,GAAC,mDAAmD;AACrF,MAAMC,mBAAmB,GAAC,6CAA6C;AACvE;AACA,MAAMC,sBAAsB,GAAC,6CAA6C;;AAE1E;AACA,MAAMC,sBAAsB,GAAC,6CAA6C;AAE1E,MAAMC,oBAAoB,GAAC,kDAAkD;AAC7E,MAAMC,gBAAgB,GAAC,uCAAuC;AAC9D,MAAMC,wBAAwB,GAAC,gCAAgC;AAC/D,MAAMC,WAAW,GAAC,4DAA4D;AAC9E,MAAMC,cAAc,GAAC,8DAA8D;AACnF,MAAMC,sBAAsB,GAAG,kDAAkD;AACjF,MAAMC,YAAY,GAAE,kCAAiC;AACrD,MAAMC,YAAY,GAAG;EACnBC,iBAAiB,EAAGC,KAAK,IAAK;IAC5B,IAAI,CAACA,KAAK,EAAE;MACV,OAAOH,YAAY;IACrB,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACDI,gCAAgC,EAAGD,KAAK,IAAK;IAC3C,IAAI,CAACA,KAAK,CAACE,IAAI,CAAC,CAAC,IAAIF,KAAK,KAAG,sBAAsB,EAAE;MACnD,OAAQ,kCAAiC;IAC3C,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EAEAG,aAAa,EAAGC,MAAM,IAAK;IACxB,MAAMC,aAAa,GAAGD,MAAM,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAEzE,IAAIH,MAAM,CAACI,MAAM,GAAG,EAAE,EAAE;MACxB,OAAOnB,sBAAsB;IAC7B,CAAC,MAAM,IAAIgB,aAAa,KAAKD,MAAM,EAAE;MACnC,OAAOjB,2BAA2B;IACpC,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EAEDsB,aAAa,EAAIL,MAAM,IAAK;IAC1B,MAAMM,sBAAsB,GAAG,oBAAoB;IAEnD,IAAIN,MAAM,CAACI,MAAM,GAAG,EAAE,EAAE;MACtB,OAAOnB,sBAAsB;IAC/B,CAAC,MAAM,IAAIqB,sBAAsB,CAACC,IAAI,CAACP,MAAM,CAAC,EAAE;MAC9C,OAAOjB,2BAA2B;IACpC,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EAEHyB,cAAc,EAAEC,IAAI,IAAG;IACrB,MAAMR,aAAa,GAAGQ,IAAI,CAACP,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACvE,OAAOF,aAAa;EACtB,CAAC;EACDS,oBAAoB,EAAED,IAAI,IAAG;IAC3B,MAAMR,aAAa,GAAGQ,IAAI,CAACP,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACvE,OAAOF,aAAa;EACtB,CAAC;EAEDU,eAAe,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,aAAa,GAAG,kBAAkB;IAC5CC,OAAO,CAACC,GAAG,CAAC,CAAC;IACT,IAAI,CAACF,aAAa,CAACN,IAAI,CAACK,QAAQ,CAAC,EAAE;MACjC,OAAO,4FAA4F;IACrG,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACCI,SAAS,EAAGC,EAAE,IAAK;IACjB,IAAI,CAACA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MACjC,OAAOxB,YAAY;IACvB;IACE,MAAMyB,UAAU,GAAGD,EAAE,CAACf,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3D,IAAIc,EAAE,CAACb,MAAM,GAAG,CAAC,EAAE;MACjB,OAAOpB,mBAAmB;IAC5B,CAAC,MAAM,IAAIkC,UAAU,KAAKD,EAAE,EAAE;MAC5B,OAAO7B,gBAAgB;IACzB,CAAC,MAAM,IAAI6B,EAAE,CAACb,MAAM,GAAG,CAAC,EAAE;MACvB,OAAOjB,oBAAoB;IAC9B,CAAC,MAAM;MACL,OAAO,EAAE;IAAC;EACd,CAAC;EAEDgC,UAAU,EAAEC,KAAK,IAAG;IAClB,IAAI,CAACA,KAAK,EAAE;MACV;IACM;IACR,MAAMF,UAAU,GAAGE,KAAK,CAAClB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9D,OAAOe,UAAU;EACnB,CAAC;EAIHG,aAAa,EAAGC,MAAM,IAAK;IAEzB,MAAMC,WAAW,GAAG,iDAAiD;IAE9D,IAAID,MAAM,CAAClB,MAAM,GAAG,EAAE,EAAE;MACzB,OAAOlB,sBAAsB;IAC/B,CAAC,MAAM,IAAI,CAACqC,WAAW,CAAChB,IAAI,CAACe,MAAM,CAAC,EAAE;MACpC,OAAOhC,WAAW;IACpB,CAAC,MAAK;MACH,OAAO,EAAE;IACZ;EACN,CAAC;EAEDkC,cAAc,EAAEF,MAAM,IAAG;IACvB,MAAMG,GAAG,GAACH,MAAM,CAACpB,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAClE,OAAOsB,GAAG;EACZ,CAAC;EACDC,aAAa,EAAGC,MAAM,IAAK;IACzB,IAAIA,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;MACpC,OAAO,yCAAyC;IAClD,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACDC,eAAe,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,aAAa,GAAGD,QAAQ,CAAC3B,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IACpE,IAAI0B,QAAQ,CAACzB,MAAM,GAAG,CAAC,EAAE;MACvB,OAAOpB,mBAAmB;IAC5B,CAAC,MAAM,IAAI8C,aAAa,KAAKD,QAAQ,EAAE;MACrC,OAAOzC,gBAAgB;IACzB,CAAC,MAAM,IAAIyC,QAAQ,CAACzB,MAAM,GAAG,CAAC,EAAE;MAC7B,OAAOZ,sBAAsB;IAChC,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACDuC,gBAAgB,EAAGF,QAAQ,IAAK;IAC9B,MAAMG,SAAS,GAAGH,QAAQ,CAAC3B,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAE9D,OAAO6B,SAAS;EACpB;AAGF,CAAC;AACD,eAAetC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}