{"ast":null,"code":"// Componente de validaciones\nconst errorCaracteresNoPermitidos = 'Esta intentando ingresar un caracter no permitido';\nconst errorOchoCaracteres = 'Este campo no puede superar los 8 caracteres';\nconst errorTreintaCaracteres = 'Este campo no puede superar los 30 caracteres';\nconst errorSieteCaracteres = 'Este campo no puede ser menor los 7 caracteres';\nconst errorSoloNumeros = 'Solo se permiten caracteres numéricos';\nconst errorSeleccioneUnaOpcion = 'Seleccione al menos una opción';\nconst errorCorreo = 'Ingrese un correo válido en el formato example@dominio.com';\nconst Validaciones = {\n  validarNombre: nombre => {\n    const nombreRegex = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(3, 30);\n    if (nombre.length > 30) {\n      //  setErrorMessage(`El campo ${name} no puede superar los 30 caracteres`);\n      return errorTreintaCaracteres;\n    } else if (nombreRegex !== value) {\n      setErrorMessages({\n        ...errorMessages,\n        [name]: errorCaracteresNoPermitidos\n      });\n      // setErrorMessage(`Caracteres no permitidos en ${name}`);\n    } else {\n      //setErrorMessage('');\n      setErrorMessages({\n        ...errorMessages,\n        [name]: ''\n      });\n    }\n    if (!nombreRegex.test(nombre)) {\n      if (nombre.length > 30) {\n        return \"El nombre no debe exceder los 30 caracteres.\";\n      } else if (nombre.length < 3) {\n        return \"El nombre debe tener al menos 3 caracteres.\";\n      } else {\n        return \"Por favor, ingrese un nombre válido (solo letras y espacios).\";\n      }\n    } else {\n      return \"\";\n    }\n  },\n  validarApellido: apellido => {\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\n    if (!apellidoRegex.test(apellido)) {\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarCI: CI => {\n    const ciRegex = /^\\d{7,8}$/;\n    if (!ciRegex.test(CI)) {\n      return \"Por favor, ingrese un número de cédula válido (entre 7 y 8 dígitos).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarCorreo: correo => {\n    const correoRegex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\n    if (!correoRegex.test(correo)) {\n      return \"Por favor, ingrese un correo electrónico válido (ejemplo@example.com).\";\n    } else {\n      return \"\";\n    }\n  },\n  validarGenero: genero => {\n    if (genero !== \"F\" && genero !== \"M\") {\n      return \"Por favor, seleccione un género válido.\";\n    } else {\n      return \"\";\n    }\n  },\n  validarTelefono: telefono => {\n    const telefonoRegex = /^\\d{1,8}$/;\n    if (!telefonoRegex.test(telefono)) {\n      return \"Por favor, ingrese un número de teléfono válido (máximo 8 dígitos).\";\n    } else {\n      return \"\";\n    }\n  }\n};\nexport default Validaciones;","map":{"version":3,"names":["errorCaracteresNoPermitidos","errorOchoCaracteres","errorTreintaCaracteres","errorSieteCaracteres","errorSoloNumeros","errorSeleccioneUnaOpcion","errorCorreo","Validaciones","validarNombre","nombre","nombreRegex","replace","substring","length","value","setErrorMessages","errorMessages","name","test","validarApellido","apellido","apellidoRegex","validarCI","CI","ciRegex","validarCorreo","correo","correoRegex","validarGenero","genero","validarTelefono","telefono","telefonoRegex"],"sources":["C:/Users/Evita/Desktop/TIS0.2/AdministradorDeEventos/frontend/src/components/utils/Validaciones.jsx"],"sourcesContent":["// Componente de validaciones\r\nconst errorCaracteresNoPermitidos='Esta intentando ingresar un caracter no permitido';\r\nconst errorOchoCaracteres='Este campo no puede superar los 8 caracteres';\r\nconst errorTreintaCaracteres='Este campo no puede superar los 30 caracteres';\r\nconst errorSieteCaracteres='Este campo no puede ser menor los 7 caracteres';\r\nconst errorSoloNumeros='Solo se permiten caracteres numéricos';\r\nconst errorSeleccioneUnaOpcion='Seleccione al menos una opción';\r\nconst errorCorreo='Ingrese un correo válido en el formato example@dominio.com';\r\nconst Validaciones = {\r\n\r\n   validarNombre: (nombre) => {\r\n      const nombreRegex = nombre.replace(/[^a-zA-Z\\s]/g, '').substring(3, 30);\r\n\r\n      if (nombre.length > 30) {\r\n        //  setErrorMessage(`El campo ${name} no puede superar los 30 caracteres`);\r\n        return errorTreintaCaracteres;\r\n       \r\n        } else if (nombreRegex !== value) {\r\n          setErrorMessages({\r\n              ...errorMessages,\r\n              [name]: errorCaracteresNoPermitidos,\r\n            });\r\n         // setErrorMessage(`Caracteres no permitidos en ${name}`);\r\n        } else {\r\n          //setErrorMessage('');\r\n          setErrorMessages({\r\n              ...errorMessages,\r\n              [name]: '',\r\n            });\r\n        }\r\n\r\n\r\n      if (!nombreRegex.test(nombre)) {\r\n        if (nombre.length >30) {\r\n          return \"El nombre no debe exceder los 30 caracteres.\";\r\n        } else if (nombre.length <3) {\r\n          return \"El nombre debe tener al menos 3 caracteres.\";\r\n        } else {\r\n          return \"Por favor, ingrese un nombre válido (solo letras y espacios).\";\r\n        }\r\n      } else {\r\n        return \"\";\r\n      }\r\n    },\r\n   \r\n\r\n\r\n  validarApellido: (apellido) => {\r\n    const apellidoRegex = /^[A-Za-z]{3,30}$/;\r\n\r\n    if (!apellidoRegex.test(apellido)) {\r\n      return \"Por favor, ingrese un apellido válido (entre 3 y 30 caracteres alfabéticos, sin espacios).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n    validarCI: (CI) => {\r\n      const ciRegex = /^\\d{7,8}$/;\r\n      if (!ciRegex.test(CI)) {\r\n        return \"Por favor, ingrese un número de cédula válido (entre 7 y 8 dígitos).\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    },\r\n  validarCorreo: (correo) => {\r\n    const correoRegex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/;\r\n    if (!correoRegex.test(correo)) {\r\n      return \"Por favor, ingrese un correo electrónico válido (ejemplo@example.com).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  validarGenero: (genero) => {\r\n    if (genero !== \"F\" && genero !== \"M\") {\r\n      return \"Por favor, seleccione un género válido.\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n  validarTelefono: (telefono) => {\r\n    const telefonoRegex = /^\\d{1,8}$/;\r\n    if (!telefonoRegex.test(telefono)) {\r\n      return \"Por favor, ingrese un número de teléfono válido (máximo 8 dígitos).\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n};\r\nexport default Validaciones;"],"mappings":"AAAA;AACA,MAAMA,2BAA2B,GAAC,mDAAmD;AACrF,MAAMC,mBAAmB,GAAC,8CAA8C;AACxE,MAAMC,sBAAsB,GAAC,+CAA+C;AAC5E,MAAMC,oBAAoB,GAAC,gDAAgD;AAC3E,MAAMC,gBAAgB,GAAC,uCAAuC;AAC9D,MAAMC,wBAAwB,GAAC,gCAAgC;AAC/D,MAAMC,WAAW,GAAC,4DAA4D;AAC9E,MAAMC,YAAY,GAAG;EAElBC,aAAa,EAAGC,MAAM,IAAK;IACxB,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAEvE,IAAIH,MAAM,CAACI,MAAM,GAAG,EAAE,EAAE;MACtB;MACA,OAAOX,sBAAsB;IAE7B,CAAC,MAAM,IAAIQ,WAAW,KAAKI,KAAK,EAAE;MAChCC,gBAAgB,CAAC;QACb,GAAGC,aAAa;QAChB,CAACC,IAAI,GAAGjB;MACV,CAAC,CAAC;MACL;IACD,CAAC,MAAM;MACL;MACAe,gBAAgB,CAAC;QACb,GAAGC,aAAa;QAChB,CAACC,IAAI,GAAG;MACV,CAAC,CAAC;IACN;IAGF,IAAI,CAACP,WAAW,CAACQ,IAAI,CAACT,MAAM,CAAC,EAAE;MAC7B,IAAIA,MAAM,CAACI,MAAM,GAAE,EAAE,EAAE;QACrB,OAAO,8CAA8C;MACvD,CAAC,MAAM,IAAIJ,MAAM,CAACI,MAAM,GAAE,CAAC,EAAE;QAC3B,OAAO,6CAA6C;MACtD,CAAC,MAAM;QACL,OAAO,+DAA+D;MACxE;IACF,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EAIHM,eAAe,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,aAAa,GAAG,kBAAkB;IAExC,IAAI,CAACA,aAAa,CAACH,IAAI,CAACE,QAAQ,CAAC,EAAE;MACjC,OAAO,4FAA4F;IACrG,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACCE,SAAS,EAAGC,EAAE,IAAK;IACjB,MAAMC,OAAO,GAAG,WAAW;IAC3B,IAAI,CAACA,OAAO,CAACN,IAAI,CAACK,EAAE,CAAC,EAAE;MACrB,OAAO,sEAAsE;IAC/E,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACHE,aAAa,EAAGC,MAAM,IAAK;IACzB,MAAMC,WAAW,GAAG,kDAAkD;IACtE,IAAI,CAACA,WAAW,CAACT,IAAI,CAACQ,MAAM,CAAC,EAAE;MAC7B,OAAO,wEAAwE;IACjF,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACDE,aAAa,EAAGC,MAAM,IAAK;IACzB,IAAIA,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;MACpC,OAAO,yCAAyC;IAClD,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF,CAAC;EACDC,eAAe,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,aAAa,GAAG,WAAW;IACjC,IAAI,CAACA,aAAa,CAACd,IAAI,CAACa,QAAQ,CAAC,EAAE;MACjC,OAAO,qEAAqE;IAC9E,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF;AACF,CAAC;AACD,eAAexB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}